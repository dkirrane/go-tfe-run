// Package tferun provides a single method Run to create and follow up a run on
// Terraform Enterprise or Cloud.
package tferun

import (
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/avast/retry-go"
	"github.com/hashicorp/go-tfe"
)

// ClientConfig groups properties to configure a Client.
type ClientConfig struct {
	// Token used to communicate with the Terraform Cloud API. Must be a user
	// or team API token.
	Token string
	// The organization on Terraform Cloud.
	Organization string
	// The workspace on Terraform Cloud.
	Workspace string
}

// Client is used to interact with the Run API of a single workspace on
// Terraform Cloud.
type Client struct {
	client    *tfe.Client
	workspace *tfe.Workspace
}

// NewClient creates a Client from ClientConfig.
func NewClient(ctx context.Context, cfg ClientConfig) (*Client, error) {
	config := &tfe.Config{
		Token: cfg.Token,
	}
	tfeClient, err := tfe.NewClient(config)
	if err != nil {
		return nil, fmt.Errorf("could not create a new TFE tfeClient: %w", err)
	}

	w, err := tfeClient.Workspaces.Read(ctx, cfg.Organization, cfg.Workspace)
	if err != nil {
		return nil, fmt.Errorf("could not retrieve workspace '%v/%v': %w", cfg.Organization, cfg.Workspace, err)
	}

	c := Client{
		client:    tfeClient,
		workspace: w,
	}
	return &c, nil
}

// RunOptions groups all options available when creating a new run.
type RunOptions struct {
	// Message to use as name of the run. This field is optional.
	Message *string
	// The directory that is uploaded to Terraform Cloud, respects
	// .terraformignore. Defaults to the current directory.
	Directory *string
	// Whether to create a speculative run. A speculative run can not be
	// applied.
	Speculative bool
	// Whether we should wait for the non-speculative run to be applied. This
	// will block until the run is finished.
	WaitForCompletion bool
	// Contents of a auto.tfvars file that will be uploaded to Terraform Cloud.
	// This can be used to set temporary Terraform variables. These variables
	// will not be preserved across runs.
	TfVars *string
}

// RunOutput holds the data that is generated by a run.
type RunOutput struct {
	// URL to the run on Terraform Cloud.
	RunURL string
	// Whether this run has changes. After a speculative plan this would
	// indicate whether an apply would cause changes, after a non-speculative
	// plan this indicates whether the run has caused any changes.
	// This is not populated for non-speculative runs on workspaces that do not
	// have auto-apply configured or when WaitForCompletion is not set.
	HasChanges *bool
}

// Run creates a new run on Terraform Cloud.
//
// If RunOptions.WaitForCompletion is set this method will block until the run
// is finished, except if the run is non-speculative and the workspace has
// disabled auto-apply. If auto-apply is disabled this method might block
// indefinitely.
func (c *Client) Run(ctx context.Context, options RunOptions) (output RunOutput, err error) {
	cvOptions := tfe.ConfigurationVersionCreateOptions{
		// Don't automatically queue the new run, we want to create the run
		// manually to be able to set the message.
		AutoQueueRuns: tfe.Bool(false),
		Speculative:   &options.Speculative,
	}
	cv, err := c.client.ConfigurationVersions.Create(ctx, c.workspace.ID, cvOptions)
	if err != nil {
		if err == tfe.ErrResourceNotFound {
			err = fmt.Errorf("could not create configuration version (404 not found), this might happen if you are not using a user or team API token")
		} else {
			err = fmt.Errorf("could not create a new configuration version: %w", err)
		}
		return
	}

	dir := "./"
	if options.Directory != nil {
		dir = *options.Directory
	}

	if options.TfVars != nil {
		// Creating a *.auto.tfvars file that is uploaded with the rest of the
		// code is the easiest way to temporarily set a variable. The Terraform
		// Cloud API only allows setting workspace variables. These variables
		// are persistent across runs which might cause undesired side-effects.
		varsFile := filepath.Join(dir, c.workspace.WorkingDirectory, "run.auto.tfvars")

		fmt.Printf("Creating variables file %v\n", varsFile)

		err = ioutil.WriteFile(varsFile, []byte(*options.TfVars), 0644)
		if err != nil {
			err = fmt.Errorf("could not create run.auto.tfvars: %w", err)
			return
		}

		defer func() {
			err := os.Remove(varsFile)
			if err != nil {
				fmt.Printf("Could not remove run.auto.tfvars: %v", err)
			}
		}()
	}

	fmt.Print("Uploading directory...\n")

	err = c.client.ConfigurationVersions.Upload(ctx, cv.UploadURL, dir)
	if err != nil {
		err = fmt.Errorf("could not upload directory '%v': %w", options.Directory, err)
		return
	}

	fmt.Print("Done uploading.\n")

	var r *tfe.Run

	// Runs.Create is put within a retry block since this call sporadically
	// fails with a cryptic error 'invalid run parameters'
	// https://github.com/hashicorp/go-tfe/issues/116
	err = retry.Do(func() error {
		rOptions := tfe.RunCreateOptions{
			Workspace:            c.workspace,
			ConfigurationVersion: cv,
			Message:              options.Message,
		}
		r, err = c.client.Runs.Create(ctx, rOptions)
		if err != nil {
			err = fmt.Errorf("could not create run: %w", err)
			return err
		}
		return nil
	}, retry.Delay(1*time.Second))
	if err != nil {
		return
	}

	runID := r.ID
	runURL := fmt.Sprintf(
		"https://app.terraform.io/app/%v/workspaces/%v/runs/%v",
		c.workspace.Organization.Name, c.workspace.Name, runID,
	)

	fmt.Printf("Run %v has been queued\n", runID)
	fmt.Printf("View the run online:\n")
	fmt.Printf("%v\n", runURL)

	output.RunURL = runURL

	// If auto apply isn't enabled a run could hang for a long time, even if
	// the run itself wouldn't change anything the previous run could still be
	// blocked waiting for confirmation.
	// Speculative runs can always continue.
	if !options.Speculative && !c.workspace.AutoApply {
		fmt.Print("Auto apply isn't enabled, won't wait for completion.\n")
		return
	}

	if !options.WaitForCompletion {
		fmt.Print("Won't wait for completion.\n")
		return
	}

	var prevStatus tfe.RunStatus
	for {
		r, err = c.client.Runs.Read(ctx, runID)
		if err != nil {
			err = fmt.Errorf("could not read run '%v': %v", runID, err)
			return
		}

		if prevStatus != r.Status {
			fmt.Printf("Run status: %v\n", prettyPrint(r.Status))
			prevStatus = r.Status
		}

		if isEndStatus(r.Status) {
			break
		}

		time.Sleep(500 * time.Millisecond)
	}

	output.HasChanges = tfe.Bool(r.HasChanges)

	switch r.Status {

	case tfe.RunPlannedAndFinished:
		fmt.Println("Run has been planned, nothing to do.")
	case tfe.RunApplied:
		fmt.Println("Run has been applied!")

	case tfe.RunCanceled:
		err = fmt.Errorf("run %v has been canceled", r.ID)
	case tfe.RunDiscarded:
		err = fmt.Errorf("run %v has been discarded", r.ID)
	case tfe.RunErrored:
		err = fmt.Errorf("run %v has errored", r.ID)
	}

	return
}

func isEndStatus(r tfe.RunStatus) bool {
	// Run statuses: https://pkg.go.dev/github.com/hashicorp/go-tfe?tab=doc#RunStatus
	// Documentation: https://www.terraform.io/docs/cloud/api/run.html#run-states
	switch r {
	case
		tfe.RunPolicySoftFailed,
		tfe.RunPlannedAndFinished,
		tfe.RunApplied,
		tfe.RunDiscarded,
		tfe.RunErrored,
		tfe.RunCanceled:
		return true
	}
	return false
}

func prettyPrint(r tfe.RunStatus) string {
	return strings.ReplaceAll(string(r), "_", " ")
}

type minimalTerraformState struct {
	Outputs map[string]terraformOutput `json:"outputs"`
}

type terraformOutput struct {
	Type  string `json:"type"`
	Value string `json:"value"`
}

// GetTerraformOutputs retrieves the outputs from the current Terraform state.
func (c *Client) GetTerraformOutputs(ctx context.Context) (map[string]string, error) {
	s, err := c.client.StateVersions.Current(ctx, c.workspace.ID)
	if err != nil {
		return nil, fmt.Errorf("could not get current state: %w", err)
	}

	bytes, err := c.client.StateVersions.Download(ctx, s.DownloadURL)
	if err != nil {
		return nil, fmt.Errorf("could not download state: %w", err)
	}

	var state minimalTerraformState
	err = json.Unmarshal(bytes, &state)
	if err != nil {
		return nil, fmt.Errorf("could not parse state: %w", err)
	}

	outputs := make(map[string]string)
	for k, v := range state.Outputs {
		outputs[k] = v.Value
	}

	fmt.Printf("Outputs from current state:\n")
	for k, v := range outputs {
		fmt.Printf(" - %v: %v\n", k, v)
	}

	return outputs, nil
}
